// <auto-generated />
using System;
using Business.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Business.Migrations
{
    [DbContext(typeof(BasicContext))]
    partial class BasicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Business.AccountTradeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account");

                    b.Property<string>("Algorithm");

                    b.Property<string>("DecidePercent");

                    b.Property<decimal>("DesiredDollarQuantity")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("DesiredPercentProfit")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("DesiredProfit")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("DesiredQuantity")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("DollarQuantity")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("EnterTax")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Pair");

                    b.Property<decimal>("PercentProfit")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Side");

                    b.Property<string>("SignalStr");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("AccountTradeHistories");
                });

            modelBuilder.Entity("Business.DailyUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("dailyTrigger");

                    b.HasKey("Id");

                    b.ToTable("DailyUpdates");
                });

            modelBuilder.Entity("Business.Data.OrderBookModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookType");

                    b.Property<string>("CurrencyName");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("MarketSituation");

                    b.Property<double>("Price");

                    b.Property<double>("Volume");

                    b.HasKey("Id");

                    b.ToTable("OrderBookModels");
                });

            modelBuilder.Entity("Business.Data.TradeDeltaModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyName");

                    b.Property<double>("Delta");

                    b.Property<DateTimeOffset>("TimeFrom");

                    b.Property<DateTimeOffset>("TimeTo");

                    b.HasKey("Id");

                    b.ToTable("TradeDeltaModels");
                });

            modelBuilder.Entity("Business.Data.TradeHistoryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyName");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("MarketSituation");

                    b.Property<DateTimeOffset>("OrderTime");

                    b.Property<double>("Price");

                    b.Property<string>("Side");

                    b.Property<double>("Volume");

                    b.HasKey("Id");

                    b.ToTable("TradeHistoryModels");
                });

            modelBuilder.Entity("Business.ExchangeKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId");

                    b.Property<string>("Name");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExchangeKeys");
                });

            modelBuilder.Entity("Business.IgnoreIds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.ToTable("IgnoreIds");
                });

            modelBuilder.Entity("Business.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Business.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastAuthorizationDate");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int?>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("UserModels");
                });

            modelBuilder.Entity("Business.WrongOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.ToTable("WrongOrders");
                });

            modelBuilder.Entity("Business.ExchangeKey", b =>
                {
                    b.HasOne("Business.UserModel", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Business.UserModel", b =>
                {
                    b.HasOne("Business.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}

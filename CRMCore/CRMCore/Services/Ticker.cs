// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var ticker = Ticker.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Ticker
    {
        [JsonProperty("OrderBookAsks")]
        public List<OrderBook> OrderBookAsks { get; set; }

        [JsonProperty("OrderBookBids")]
        public List<OrderBook> OrderBookBids { get; set; }

        [JsonProperty("TradeHistory")]
        public List<TradeHistory> TradeHistory { get; set; }

        [JsonProperty("TradeDelta")]
        public List<TradeDelta> TradeDelta { get; set; }
    }

    public partial class OrderBook
    {
        [JsonProperty("Time")]
        public DateTimeOffset Time { get; set; }

        [JsonProperty("Situation")]
        public Situation Situation { get; set; }

        [JsonProperty("Type")]
        public OrderBookAskType Type { get; set; }

        [JsonProperty("Price")]
        public double Price { get; set; }

        [JsonProperty("Amount")]
        public double Amount { get; set; }

        [JsonProperty("Done")]
        public bool Done { get; set; }
    }

    public partial class TradeDelta
    {
        [JsonProperty("TimeFrom")]
        public DateTimeOffset TimeFrom { get; set; }

        [JsonProperty("TimeTo")]
        public DateTimeOffset TimeTo { get; set; }

        [JsonProperty("Situation")]
        public Situation Situation { get; set; }

        [JsonProperty("Value")]
        public double Value { get; set; }
    }

    public partial class TradeHistory
    {
        [JsonProperty("Time")]
        public DateTimeOffset Time { get; set; }

        [JsonProperty("Situation")]
        public Situation Situation { get; set; }

        [JsonProperty("Id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("Type")]
        public TradeHistoryType Type { get; set; }

        [JsonProperty("Side")]
        public Side Side { get; set; }

        [JsonProperty("OrderTime")]
        public DateTimeOffset OrderTime { get; set; }

        [JsonProperty("Price")]
        public double Price { get; set; }

        [JsonProperty("Amount")]
        public double Amount { get; set; }
    }

    public enum Situation { Flat, Trend, Unknown };

    public enum OrderBookAskType { Ask, Bid };

    public enum Side { Buy, Sell };

    public enum TradeHistoryType { Market };

    public partial class Ticker
    {
        public static Ticker FromJson(string json) => JsonConvert.DeserializeObject<Ticker>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Ticker self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                SituationConverter.Singleton,
                OrderBookAskTypeConverter.Singleton,
                SideConverter.Singleton,
                TradeHistoryTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class SituationConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Situation) || t == typeof(Situation?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "flat":
                    return Situation.Flat;
                case "trend":
                    return Situation.Trend;
                case "unknown":
                    return Situation.Unknown;
            }
            throw new Exception("Cannot unmarshal type Situation");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Situation)untypedValue;
            switch (value)
            {
                case Situation.Flat:
                    serializer.Serialize(writer, "flat");
                    return;
                case Situation.Trend:
                    serializer.Serialize(writer, "trend");
                    return;
                case Situation.Unknown:
                    serializer.Serialize(writer, "unknown");
                    return;
            }
            throw new Exception("Cannot marshal type Situation");
        }

        public static readonly SituationConverter Singleton = new SituationConverter();
    }

    internal class OrderBookAskTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OrderBookAskType) || t == typeof(OrderBookAskType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ask":
                    return OrderBookAskType.Ask;
                case "bid":
                    return OrderBookAskType.Bid;
            }
            throw new Exception("Cannot unmarshal type OrderBookAskType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OrderBookAskType)untypedValue;
            switch (value)
            {
                case OrderBookAskType.Ask:
                    serializer.Serialize(writer, "ask");
                    return;
                case OrderBookAskType.Bid:
                    serializer.Serialize(writer, "bid");
                    return;
            }
            throw new Exception("Cannot marshal type OrderBookAskType");
        }

        public static readonly OrderBookAskTypeConverter Singleton = new OrderBookAskTypeConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class SideConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Side) || t == typeof(Side?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "buy":
                    return Side.Buy;
                case "sell":
                    return Side.Sell;
            }
            throw new Exception("Cannot unmarshal type Side");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Side)untypedValue;
            switch (value)
            {
                case Side.Buy:
                    serializer.Serialize(writer, "buy");
                    return;
                case Side.Sell:
                    serializer.Serialize(writer, "sell");
                    return;
            }
            throw new Exception("Cannot marshal type Side");
        }

        public static readonly SideConverter Singleton = new SideConverter();
    }

    internal class TradeHistoryTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TradeHistoryType) || t == typeof(TradeHistoryType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "market")
            {
                return TradeHistoryType.Market;
            }
            throw new Exception("Cannot unmarshal type TradeHistoryType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TradeHistoryType)untypedValue;
            if (value == TradeHistoryType.Market)
            {
                serializer.Serialize(writer, "market");
                return;
            }
            throw new Exception("Cannot marshal type TradeHistoryType");
        }

        public static readonly TradeHistoryTypeConverter Singleton = new TradeHistoryTypeConverter();
    }
}
